<!DOCTYPE html>
<html>
<head>
  <title>CyberTwitter - Profile</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="/css/style.css">
  <link rel="stylesheet" type="text/css" href="/css/profile_style.css">
</head>
<body>
<canvas id="Matrix"></canvas>
  <div class="overlay">
    <% if @user %>
    <div class="profile-container">
      <header>
        <h1>Your Profile</h1>
        <a href="/feed" class="button">Go to Feed</a>
        <a href="/logout" class="button">Logout</a>
        <button id="notification-bell" class="button">
          <span class="bell-icon"></span>
          <span id="notification-indicator" class="indicator"></span>
        </button>
      </header>

      <main>
        <div class="feed-container">
          <h3>Welcome, <%= @user.username %>!</h3>

          <h4>My Peeps:</h4>

          <% @peeps.each do |peep| %>
            <a href="/feed#peep-<%= peep.id %>" class="peep-link">
              <div class="peep">
                <div class="peep-content">
                  <p><%= peep.content %></p>
                </div>
                <div class="peep-meta">
                  <p>Posted by you</p>
                </div>
              </div>
            </a>
          <% end %>
        </div>

      </main>

      <footer>
        <a href="/logout">Logout</a>
      </footer>
    </div>
    <div id="notification-popup" class="notification-popup">
    <button id="close-notification" class="close-button">×</button>
      <h4>Notifications</h4>
      <div id="notification-list" class="notifications">
        <% @notifications.each do |notification| %>
          <div class="notification">
            <p><%= notification.content %></p>
            <p>Peep: <a href="/feed#peep-<%= notification.peep_id %>">View Peep</a></p>
          </div>
        <% end %>
      </div>
    </div>
  <% else %>
    <div class="login-container">
      <p>You are not logged in.</p>
      <div class="login-buttons">
        <a href="/login" class="button">Log in</a>
        <span>&nbsp;</span>
        <a href="/signup" class="button">Sign up</a>
      </div>
    </div>
  <% end %>
  </div>
  <script>
    const canvas = document.getElementById('Matrix');
    const context = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const katakana = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブヅプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン';
    const latin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const nums = '0123456789';

    const alphabet = katakana + latin + nums;

    const fontSize = 16;
    const columns = canvas.width / fontSize;

    const rainDrops = Array.from({ length: columns }).fill(canvas.height);

    for (let x = 0; x < columns; x++) {
        rainDrops[x] = 1;
    }

    const draw = () => {
        context.fillStyle = 'rgba(0, 0, 0, 0.05)';
        context.fillRect(0, 0, canvas.width, canvas.height);

        context.fillStyle = '#0F0';
        context.font = fontSize + 'px monospace';

        for (let i = 0; i < rainDrops.length; i++) {
            const text = alphabet.charAt(Math.floor(Math.random() * alphabet.length));
            context.fillText(text, i * fontSize, rainDrops[i] * fontSize);

            if (rainDrops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                rainDrops[i] = 0;
            }
            rainDrops[i]++;
        }
    };

    setInterval(draw, 75);

    const notificationBell = document.getElementById('notification-bell');
    const notificationPopup = document.getElementById('notification-popup');
    const notificationIndicator = document.getElementById('notification-indicator');
    const closeNotificationButton = document.getElementById('close-notification');
    closeNotificationButton.addEventListener('click', closeNotificationPopup);

    let isNotificationOpen = false; // Track the state of the notification popup

    notificationBell.addEventListener('click', () => {
      if (isNotificationOpen) {
        closeNotificationPopup();
      } else {
        openNotificationPopup();
      }
    });

    function openNotificationPopup() {
      notificationPopup.style.display = 'block';
      isNotificationOpen = true;

      // Hide the notification indicator when the popup is opened
      notificationIndicator.style.display = 'none';
    }

    function closeNotificationPopup() {
      notificationPopup.style.display = 'none';
      isNotificationOpen = false;
    }

    // Check and display the indicator if there are new notifications
    const hasNewNotifications = <%= @notifications.any? %>; // Replace with the appropriate condition to check if there are new notifications
    if (hasNewNotifications) {
      notificationIndicator.style.display = 'block';
    } else {
      notificationIndicator.style.display = 'none';
    }
  </script>
</body>
</html>
