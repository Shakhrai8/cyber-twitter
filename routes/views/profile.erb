<!DOCTYPE html>
<html>
<head>
  <title>CyberTwitter - Profile</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" type="text/css" href="/css/style.css">
  <link rel="stylesheet" type="text/css" href="/css/profile_style.css">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.3/css/all.css" integrity="sha384-SZXxX4whJ79/gErwcOYf+zWLeJdY/qpuqC4cAa9rOGUstPomtqpuNWT9wdPEn2fk" crossorigin="anonymous">
</head>
<body>
<canvas id="Matrix"></canvas>
<div class="overlay">
  <% if @user %>
  <div class="profile-container">
    <header>
      <h1>Your Profile</h1>
      <div class="button-container">
        <a href="/feed" class="button">Go to Feed</a>
        <button id="notification-bell" class="button">
          <i class="fas fa-bell"></i>
        </button>
        <a href="/logout" class="button">Logout</a>
      </div>
    </header>

    <main>
      <div class="feed-container">
        <div class="profile-info">
          <div class="profile-photo"> 
            <img src="<%= @user.profile_photo_url %>" alt="Profile Photo" id="profile-photo" class="profile-picture">
            <button id="change-photo-btn" class="button">Change Photo</button>
          </div>
          
          <div class="profile-details">
            <h3>@<%= @user.username %></h3>
            <p><%= @user.name %></p>
            <div class="bio-section">
              <% if @user.bio %>
                <p id="user-bio"><%= @user.bio %></p>
              <% else %>
                <p id="user-bio" class="empty-bio">No bio available</p>
              <% end %>
              <button class="button" id="edit-bio-btn">Edit Bio</button>
              <div id="bio-editor">
                <textarea id="new-bio"><%= @user.bio %></textarea>
                <button class="button" id="save-bio-btn">Save Changes</button>
                <button class="button" id="cancel-bio-btn">Cancel Changes</button>
              </div>
            </div>
          </div>
        </div>

        <h4>My Peeps:</h4>

        <% @peeps.each do |peep| %>
          <a href="/feed#peep-<%= peep.id %>" class="peep-link">
            <div class="peep">
              <div class="peep-content">
                <p><%= peep.content %></p>
              </div>
              <div class="peep-meta">
                <p><%= peep.timestamp %></p>
              </div>
            </div>
          </a>
        <% end %>
      </div>
    </main>

      <footer>
        <a href="/logout">Logout</a>
      </footer>
    </div>
    <div id="notification-popup" class="notification-popup">
    <button id="close-notification" class="close-button">×</button>
      <h4>Notifications</h4>
      <div id="notification-list" class="notifications">
        <% @notifications.each do |notification| %>
          <div class="notification">
            <p><%= notification.content %></p>
            <p>Peep: <a href="/feed#peep-<%= notification.peep_id %>">View Peep</a></p>
            <p><%= notification.timestamp %></p>
            <form action="/profile/dismiss" method="POST">
              <input type="hidden" name="notification_id" value="<%= notification.id %>">
              <button type="submit" class="dismiss-button">Dismiss</button>
            </form>
          </div>
        <% end %>
      </div>
    </div>
  <% else %>
    <div class="login-container">
      <p>You are not logged in.</p>
      <div class="login-buttons">
        <a href="/login" class="button">Log in</a>
        <span>&nbsp;</span>
        <a href="/signup" class="button">Sign up</a>
      </div>
    </div>
  <% end %>
  </div>
  <script>
    const canvas = document.getElementById('Matrix');
    const context = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const katakana = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブヅプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン';
    const latin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const nums = '0123456789';

    const alphabet = katakana + latin + nums;

    const fontSize = 16;
    const columns = canvas.width / fontSize;

    const rainDrops = Array.from({ length: columns }).fill(canvas.height);

    for (let x = 0; x < columns; x++) {
        rainDrops[x] = 1;
    }

    const draw = () => {
        context.fillStyle = 'rgba(0, 0, 0, 0.05)';
        context.fillRect(0, 0, canvas.width, canvas.height);

        context.fillStyle = '#0F0';
        context.font = fontSize + 'px monospace';

        for (let i = 0; i < rainDrops.length; i++) {
            const text = alphabet.charAt(Math.floor(Math.random() * alphabet.length));
            context.fillText(text, i * fontSize, rainDrops[i] * fontSize);

            if (rainDrops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                rainDrops[i] = 0;
            }
            rainDrops[i]++;
        }
    };

    setInterval(draw, 75);

    const notificationBell = document.getElementById('notification-bell');
    const notificationPopup = document.getElementById('notification-popup');
    const notificationIndicator = document.getElementById('notification-indicator');
    const closeNotificationButton = document.getElementById('close-notification');
    closeNotificationButton.addEventListener('click', closeNotificationPopup);

    let isNotificationOpen = false; // Track the state of the notification popup

    notificationBell.addEventListener('click', () => {
      if (isNotificationOpen) {
        closeNotificationPopup();
      } else {
        openNotificationPopup();
      }
    });

    function openNotificationPopup() {
      notificationPopup.style.display = 'block';
      isNotificationOpen = true;

      // Hide the notification indicator when the popup is opened
      notificationIndicator.style.display = 'none';
    }

    function closeNotificationPopup() {
      notificationPopup.style.display = 'none';
      isNotificationOpen = false;
    }

    // Check and display the indicator if there are new notifications
    // const hasNewNotifications = <%= @notifications.any? %>; // Replace with the appropriate condition to check if there are new notifications
    // if (hasNewNotifications) {
    //   notificationIndicator.style.display = 'block';
    // } else {
    //   notificationIndicator.style.display = 'none';
    // }

    document.getElementById('change-photo-btn').addEventListener('click', function() {
    const newPhotoURL = prompt('Enter the new photo URL:');
      if (newPhotoURL) {
        fetch('/update_photo', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ photo_url: newPhotoURL }),
        })
        .then(() => {
          document.getElementById('profile-photo').src = newPhotoURL;
        });
      }
    });

    document.addEventListener('DOMContentLoaded', function () {
      document.getElementById('edit-bio-btn').addEventListener('click', function() {
        document.querySelector('.bio-section').classList.add('edit-mode');
      });

      document.getElementById('cancel-bio-btn').addEventListener('click', function() {
        document.querySelector('.bio-section').classList.remove('edit-mode');
      });

      document.getElementById('save-bio-btn').addEventListener('click', function() {
        const newBio = document.getElementById('new-bio').value;
        fetch('/update_bio', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ bio: newBio }),
        })
        .then(() => {
          document.getElementById('user-bio').innerText = newBio;
          document.querySelector('.bio-section').classList.remove('edit-mode');
        });
      });
    });

  </script>
</body>
</html>
